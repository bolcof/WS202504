using UnityEngine;
using UnityEditor;
using System.IO;

public class AutoPrefabExporter : EditorWindow {
    private const string rootObjectName = "RootObject"; // ←ここでルート名を指定

    [MenuItem("Tools/Auto Export Prefab from RootObject")]
    static void ExportPrefabFromNamedObject() {
        GameObject target = GameObject.Find(rootObjectName);
        if (target == null) {
            Debug.LogError($"ヒエラルキーに '{rootObjectName}' という名前のGameObjectが見つかりません。");
            return;
        }

        // 名前を付ける
        int counter = 0;
        AutoRenameChildren(target.transform, target.name, ref counter);

        // フォルダ作成
        string prefabFolder = "Assets/AutoGeneratedPrefabs";
        if (!Directory.Exists(prefabFolder)) {
            Directory.CreateDirectory(prefabFolder);
        }

        // Prefab保存
        string prefabPath = $"{prefabFolder}/{target.name}.prefab";
        PrefabUtility.SaveAsPrefabAssetAndConnect(target, prefabPath, InteractionMode.UserAction);

        // unitypackage書き出し
        string exportPath = "ExportedPackage.unitypackage";
        AssetDatabase.ExportPackage(prefabFolder, exportPath, ExportPackageOptions.Recurse);

        Debug.Log($"Prefabとunitypackageの出力が完了しました。\nPrefab: {prefabPath}\nPackage: {exportPath}");
    }

    static void AutoRenameChildren(Transform parent, string baseName, ref int counter) {
        foreach (Transform child in parent) {
            child.name = $"{baseName}_{counter++}";
            AutoRenameChildren(child, baseName, ref counter);
        }
    }
}